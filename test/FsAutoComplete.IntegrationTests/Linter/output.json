{
  "Kind": "info",
  "Data": "Synchronous parsing started"
}
{
  "Kind": "errors",
  "Data": {
    "File": "<absolute path removed>/FsAutoComplete.IntegrationTests/Linter/Script.fsx",
    "Errors": []
  }
}
{
  "Kind": "lint",
  "Data": [
    {
      "Info": "`not (a <> b)` might be able to be refactored into `a = b`.",
      "Range": {
        "StartColumn": 17,
        "StartLine": 2,
        "EndColumn": 27,
        "EndLine": 2
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "not (a<>b)",
            "FromRange": {
              "StartColumn": 17,
              "StartLine": 2,
              "EndColumn": 27,
              "EndLine": 2
            },
            "ToText": "a = b"
          }
        ]
      }
    },
    {
      "Info": "`fun x -> x` might be able to be refactored into `id`.",
      "Range": {
        "StartColumn": 13,
        "StartLine": 3,
        "EndColumn": 23,
        "EndLine": 3
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "fun a -> a",
            "FromRange": {
              "StartColumn": 13,
              "StartLine": 3,
              "EndColumn": 23,
              "EndLine": 3
            },
            "ToText": "id"
          }
        ]
      }
    },
    {
      "Info": "`not true` might be able to be refactored into `false`.",
      "Range": {
        "StartColumn": 13,
        "StartLine": 4,
        "EndColumn": 21,
        "EndLine": 4
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "not true",
            "FromRange": {
              "StartColumn": 13,
              "StartLine": 4,
              "EndColumn": 21,
              "EndLine": 4
            },
            "ToText": "false"
          }
        ]
      }
    },
    {
      "Info": "`not false` might be able to be refactored into `true`.",
      "Range": {
        "StartColumn": 13,
        "StartLine": 5,
        "EndColumn": 22,
        "EndLine": 5
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "not false",
            "FromRange": {
              "StartColumn": 13,
              "StartLine": 5,
              "EndColumn": 22,
              "EndLine": 5
            },
            "ToText": "true"
          }
        ]
      }
    },
    {
      "Info": "`a <> true` might be able to be refactored into `not a`.",
      "Range": {
        "StartColumn": 15,
        "StartLine": 7,
        "EndColumn": 22,
        "EndLine": 7
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "a<>true",
            "FromRange": {
              "StartColumn": 15,
              "StartLine": 7,
              "EndColumn": 22,
              "EndLine": 7
            },
            "ToText": "not a"
          }
        ]
      }
    },
    {
      "Info": "`List.head (List.sort x)` might be able to be refactored into `List.min x`.",
      "Range": {
        "StartColumn": 15,
        "StartLine": 9,
        "EndColumn": 38,
        "EndLine": 9
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "List.head (List.sort a)",
            "FromRange": {
              "StartColumn": 15,
              "StartLine": 9,
              "EndColumn": 38,
              "EndLine": 9
            },
            "ToText": "List.min a"
          }
        ]
      }
    },
    {
      "Info": "`x = null`; suggestion: Consider using pattern matching, or if you're using F# 4 then `isNull`.",
      "Range": {
        "StartColumn": 15,
        "StartLine": 8,
        "EndColumn": 21,
        "EndLine": 8
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": null
    },
    {
      "Info": "`not (a = b)` might be able to be refactored into `a <> b`.",
      "Range": {
        "StartColumn": 17,
        "StartLine": 1,
        "EndColumn": 26,
        "EndLine": 1
      },
      "Input": "let test1 a b = not (a=b)\nlet test2 a b = not (a<>b)\nlet test3 = fun a -> a\nlet test4 = not true\nlet test5 = not false\nlet test6 = List.fold ( + ) 0\nlet test7 a = a<>true\nlet test8 a = a=null\nlet test9 a = List.head (List.sort a) \n",
      "Fix": {
        "Case": "Some",
        "Fields": [
          {
            "FromText": "not (a=b)",
            "FromRange": {
              "StartColumn": 17,
              "StartLine": 1,
              "EndColumn": 26,
              "EndLine": 1
            },
            "ToText": "a <> b"
          }
        ]
      }
    }
  ]
}
