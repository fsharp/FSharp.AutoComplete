{
  "Kind": "info",
  "Data": "Synchronous parsing started"
}
{
  "Kind": "errors",
  "Data": {
    "File": "<absolute path removed>/FsAutoComplete.IntegrationTests/Tooltips/Script.fsx",
    "Errors": []
  }
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funky: \n   x: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.XA.funky\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "module CommandResponse",
        "Comment": "",
        "Footer": "Full name: Script.CommandResponse\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "record ResponseMsg<'T>\n  \n  val Data: 'T\n  val Kind: string\n  \n\n  member f: y: 'a -> int",
        "Comment": "",
        "Footer": "Full name: Script.CommandResponse.ResponseMsg`1\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funky: \n   x: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.XA.funky\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funct: \n   x: CommandResponse.ResponseMsg<'a> \n   -> unit",
        "Comment": "\n\nsome random xml docs",
        "Footer": "Full name: Script.funct\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type Abcd\n  new: unit -> Abcd\n  member Add: a: int * b: int -> int (+ 2 overloads)\n  property asdfg:  int with get\n  property bnm:  int with get,set\n  property cvbnm:  int with get,set",
        "Comment": "\n\nSample type",
        "Footer": "Full name: Script.Abcd\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member asdfg: int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.asdfg\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member bnm: int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.bnm\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member cvbnm: int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.cvbnm\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "interface Desf\n  \n  abstract property b:  int with get",
        "Comment": "",
        "Footer": "Full name: Script.Desf\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member",
        "Comment": "Used to declare a property or method in an object type.",
        "Footer": ""
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "union Qwer =\n  | A of string\n  | B of int * float\n  | C",
        "Comment": "",
        "Footer": "Full name: Script.Qwer\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "enum Gjk =\n  | Q = 1\n  | W = 2\n  | E = 3",
        "Comment": "",
        "Footer": "Full name: Script.Gjk\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type",
        "Comment": "Used to declare a class, record, structure, discriminated union, enumeration type, unit of measure, or type abbreviation.",
        "Footer": ""
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val ( >=> ): \n   a: int ->\n   b: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.( >=> )\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val ( |Even|Odd| ): \n   input: int \n       -> Choice<unit,unit>",
        "Comment": "",
        "Footer": "Full name: Script.( |Even|Odd| )\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "active recognizer Even:  \n   input: int \n       -> Choice<unit,unit>",
        "Comment": "",
        "Footer": "Full name: Script.( |Even|Odd| ).Even\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type String\n  new: value: nativeptr<char> -> String (+ 7 overloads)\n  static member Join: separator: string * value: string [] -> string (+ 4 overloads)\n  abstract member Equals: obj: obj -> bool (+ 4 overloads)\n  static member op_Equality: a: string * b: string -> bool\n  static member op_Inequality: a: string * b: string -> bool\n  member get_Chars: index: int -> char\n  member CopyTo: sourceIndex: int * destination: char [] * destinationIndex: int * count: int -> unit\n  member ToCharArray:  char [] (+ 1 overloads)\n  static member IsNullOrEmpty: value: string -> bool\n  static member IsNullOrWhiteSpace: value: string -> bool\n  abstract member GetHashCode:  int\n  member get_Length:  int\n  ...",
        "Comment": "Represents text as a series of Unicode characters.To browse the .NET Framework source code for this type, see the Reference Source.\n\n",
        "Footer": "Full name: System.String\nAssembly: mscorlib"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "module Array\n  \n  val append: array1: 'T []-> array2: 'T [] -> 'T []\n  val average: array:  ^T [] ->  ^T\n  val averageBy: projection: 'T ->  ^U-> array: 'T [] ->  ^U\n  val blit: source: 'T []-> sourceIndex: int-> target: 'T []-> targetIndex: int-> count: int -> unit\n  val collect: mapping: 'T -> 'U []-> array: 'T [] -> 'U []\n  val compareWith: comparer: 'T -> 'T -> int-> array1: 'T []-> array2: 'T [] -> int\n  val concat: arrays: seq<'T []> -> 'T []\n  val contains: value: 'T-> array: 'T [] -> bool\n  val copy: array: 'T [] -> 'T []\n  val countBy: projection: 'T -> 'Key-> array: 'T [] -> ('Key * int) []\n  val create: count: int-> value: 'T -> 'T []\n  ...",
        "Comment": "Basic operations on arrays.\n\n",
        "Footer": "Full name: Microsoft.FSharp.Collections.ArrayModule\nAssembly: FSharp.Core"
      }
    ]
  ]
}
