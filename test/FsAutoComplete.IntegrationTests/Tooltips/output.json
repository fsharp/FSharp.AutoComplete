{
  "Kind": "info",
  "Data": "Synchronous parsing started"
}
{
  "Kind": "errors",
  "Data": {
    "File": "<absolute path removed>/FsAutoComplete.IntegrationTests/Tooltips/Script.fsx",
    "Errors": []
  }
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funky : \n   x: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.XA.funky\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "module CommandResponse",
        "Comment": "",
        "Footer": "Full name: Script.CommandResponse\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "record ResponseMsg<'T>\n  val Kind : string\n  val Data : 'T\n  member f : y: 'a -> int",
        "Comment": "",
        "Footer": "Full name: Script.CommandResponse.ResponseMsg`1\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funky : \n   x: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.XA.funky\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funct : \n   x: CommandResponse.ResponseMsg<'a> \n   -> unit",
        "Comment": "\n\nsome random xml docs",
        "Footer": "Full name: Script.funct\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type Abcd\n  new : unit -> Abcd\n  member Add : a: int * b: int -> int + 2 overloads\n  property asdfg :  int with get\n  property bnm :  int with get,set\n  property cvbnm :  int with get,set",
        "Comment": "\n\nSample type",
        "Footer": "Full name: Script.Abcd\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member asdfg : int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.asdfg\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member bnm : int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.bnm\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member cvbnm : int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.cvbnm\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "interface Desf\n  abstract property b :  int with get",
        "Comment": "",
        "Footer": "Full name: Script.Desf\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member",
        "Comment": "Used to declare a property or method in an object type.",
        "Footer": ""
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "union Qwer =\n  | A of string\n  | B of int * float\n  | C",
        "Comment": "",
        "Footer": "Full name: Script.Qwer\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "enum Gjk =\n  | Q = 1\n  | W = 2\n  | E = 3",
        "Comment": "",
        "Footer": "Full name: Script.Gjk\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type",
        "Comment": "Used to declare a class, record, structure, discriminated union, enumeration type, unit of measure, or type abbreviation.",
        "Footer": ""
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val ( >=> ) : \n   a: int ->\n   b: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.( >=> )\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val ( |Even|Odd| ) : \n   input: int \n       -> Choice<unit,unit>",
        "Comment": "",
        "Footer": "Full name: Script.( |Even|Odd| )\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "active recognizer Even:  \n   input: int \n       -> Choice<unit,unit>",
        "Comment": "",
        "Footer": "Full name: Script.( |Even|Odd| ).Even\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type String\n  static member Join : separator: string * value: string [] -> string + 4 overloads\n  abstract member Equals : obj: obj -> bool + 4 overloads\n  static member op_Equality : a: string * b: string -> bool\n  static member op_Inequality : a: string * b: string -> bool\n  member get_Chars : index: int -> char\n  member CopyTo : sourceIndex: int * destination: char [] * destinationIndex: int * count: int -> unit\n  member ToCharArray :  char [] + 1 overloads\n  static member IsNullOrEmpty : value: string -> bool\n  static member IsNullOrWhiteSpace : value: string -> bool\n  abstract member GetHashCode :  int\n  member get_Length :  int\n  member Split : separator: char [] -> string [] + 5 overloads\n  member Substring : startIndex: int -> string + 1 overloads\n  member Trim : trimChars: char [] -> string + 1 overloads\n  member TrimStart : trimChars: char [] -> string\n  member TrimEnd : trimChars: char [] -> string\n  String : value: nativeptr<char> -> unit + 7 overloads\n  member IsNormalized :  bool + 1 overloads\n  member Normalize :  string + 1 overloads\n  static member Compare : strA: string * strB: string -> int + 9 overloads\n  abstract member CompareTo : value: obj -> int + 1 overloads\n  static member CompareOrdinal : strA: string * strB: string -> int + 1 overloads\n  member Contains : value: string -> bool\n  member EndsWith : value: string -> bool + 2 overloads\n  member IndexOf : value: char -> int + 8 overloads\n  member IndexOfAny : anyOf: char [] -> int + 2 overloads\n  member LastIndexOf : value: char -> int + 8 overloads\n  member LastIndexOfAny : anyOf: char [] -> int + 2 overloads\n  member PadLeft : totalWidth: int -> string + 1 overloads\n  member PadRight : totalWidth: int -> string + 1 overloads\n  member StartsWith : value: string -> bool + 2 overloads\n  member ToLower :  string + 1 overloads\n  member ToLowerInvariant :  string\n  member ToUpper :  string + 1 overloads\n  member ToUpperInvariant :  string\n  abstract member ToString :  string + 1 overloads\n  abstract member Clone :  obj\n  member Insert : startIndex: int * value: string -> string\n  member Replace : oldChar: char * newChar: char -> string + 1 overloads\n  member Remove : startIndex: int * count: int -> string + 1 overloads\n  static member Format : format: string * arg0: obj -> string + 7 overloads\n  static member Copy : str: string -> string\n  static member Concat : arg0: obj -> string + 10 overloads\n  static member Intern : str: string -> string\n  static member IsInterned : str: string -> string\n  abstract member GetTypeCode :  System.TypeCode\n  member GetEnumerator :  System.CharEnumerator\n  property Chars :  : int -> char\n  property Length :  int",
        "Comment": "Represents text as a sequence of UTF-16 code units.To browse the .NET Framework source code for this type, see the Reference Source.\n\n",
        "Footer": "Full name: System.String\nAssembly: mscorlib"
      }
    ]
  ]
}
