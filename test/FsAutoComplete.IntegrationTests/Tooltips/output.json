{
  "Kind": "info",
  "Data": "Synchronous parsing started"
}
{
  "Kind": "errors",
  "Data": {
    "File": "<absolute path removed>/FsAutoComplete.IntegrationTests/Tooltips/Script.fsx",
    "Errors": []
  }
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funky: \n   x: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.XA.funky\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "module CommandResponse",
        "Comment": "",
        "Footer": "Full name: Script.CommandResponse\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "record ResponseMsg<'T>\n  \n  val Data: 'T\n  val Kind: string\n  \n\n  member f: y: 'a -> int",
        "Comment": "",
        "Footer": "Full name: Script.CommandResponse.ResponseMsg`1\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funky: \n   x: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.XA.funky\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val funct: \n   x: CommandResponse.ResponseMsg<'a> \n   -> unit",
        "Comment": "\n\nsome random xml docs",
        "Footer": "Full name: Script.funct\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type Abcd\n  new: unit -> Abcd\n  member Add: a: int * b: int -> int (+ 2 overloads)\n  property asdfg:  int with get\n  property bnm:  int with get,set\n  property cvbnm:  int with get,set",
        "Comment": "\n\nSample type",
        "Footer": "Full name: Script.Abcd\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member asdfg: int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.asdfg\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member bnm: int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.bnm\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "member cvbnm: int",
        "Comment": "",
        "Footer": "Full name: Script.Abcd.cvbnm\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "interface Desf\n  \n  abstract property b:  int with get",
        "Comment": "",
        "Footer": "Full name: Script.Desf\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "union Qwer =\n  | A of string\n  | B of int * float\n  | C",
        "Comment": "",
        "Footer": "Full name: Script.Qwer\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "enum Gjk =\n  | Q = 1\n  | W = 2\n  | E = 3",
        "Comment": "",
        "Footer": "Full name: Script.Gjk\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "type",
        "Comment": "Used to declare a class, record, structure, discriminated union, enumeration type, unit of measure, or type abbreviation.",
        "Footer": ""
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val ( >=> ): \n   a: int ->\n   b: int \n   -> int",
        "Comment": "",
        "Footer": "Full name: Script.( >=> )\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val ( |Even|Odd| ): \n   input: int \n       -> Choice<unit,unit>",
        "Comment": "",
        "Footer": "Full name: Script.( |Even|Odd| )\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "active recognizer Even:  \n   input: int \n       -> Choice<unit,unit>",
        "Comment": "",
        "Footer": "Full name: Script.( |Even|Odd| ).Even\nAssembly: Script"
      }
    ]
  ]
}
{
  "Kind": "tooltip",
  "Data": [
    [
      {
        "Signature": "val map: \n   mapping: 'T -> 'U ->\n   list   : 'T list  \n         -> 'U list",
        "Comment": "Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection.\n\n`list`: The input list.\n`mapping`: The function to transform elements from the input list.\nGeneric parameters:\n`'T` is `int`\n`'U` is `int`",
        "Footer": "Full name: Microsoft.FSharp.Collections.List.map\nAssembly: FSharp.Core"
      }
    ]
  ]
}
{
  "Kind": "info",
  "Data": "quitting..."
}
