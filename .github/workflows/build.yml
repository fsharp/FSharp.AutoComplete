name: Build and test

on:
  push:
    branches:
      - main
      - nightly
    paths-ignore:
      - ".github"
      - ".vscode"
  pull_request:
    paths-ignore:
      - ".github"
      - ".vscode"

jobs:
  build:
    env:
      TEST_TIMEOUT_MINUTES: 40
      FSAC_TEST_DEFAULT_TIMEOUT : 120000 #ms, individual test timeouts
      DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1 # needed to allow .NET 8 RCs to participate in rollforward as expected.
    timeout-minutes: 40 # we have a locking issue, so cap the runs at ~20m to account for varying build times, etc
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-13 # using 13 because it's a bigger machine, and latest is still pointing to 12
          - ubuntu-latest
        dotnet-version: ["", "6.0.x", "7.0.x", "8.0.x"]
        # these entries will mesh with the above combinations
        include:
          # just use what's in the repo
          - global-json-file: "global.json"
            dotnet-version: ""
            include-prerelease: false
            label: "repo global.json"
            build_net7: false
            test_tfm: net6.0
          # latest 6.0
          - global-json-file: "global.json"
            dotnet-version: "6.0.x"
            include-prerelease: false
            label: "6.0"
            build_net7: false
            test_tfm: net6.0
          # latest 7.0
          - global-json-file: "global.json"
            dotnet-version: "7.0.x"
            include-prerelease: true
            label: "7.0"
            build_net7: true
            test_tfm: net7.0
          # latest 8.0
          - global-json-file: "global.json"
            dotnet-version: "8.0.x"
            include-prerelease: true
            label: "8.0"
            build_net8: true
            test_tfm: net8.0
      fail-fast: false # we have timing issues on some OS, so we want them all to run

    runs-on: ${{ matrix.os }}

    name: Build on ${{matrix.os}} for ${{ matrix.label }}

    steps:
    - uses: actions/checkout@v3

    # setup .NET per the repo global.json
    - name: Setup .NET
      uses: actions/setup-dotnet@v2

    # setup .NET per test session
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        include-prerelease: ${{ matrix.include-prerelease }}
        global-json-file: ${{ matrix.global-json-file }}
        dotnet-version: ${{ matrix.dotnet-version }}

    # remove global.json so that the env configuration takes precedence
    - name: Purge global.json
      run: rm global.json

    # let's make sure we're on the version we think we are.
    - name: Announce .NET version
      run: dotnet --info

    - name: Restore tools
      run: dotnet tool restore

    - name: Check format
      run: dotnet fantomas --check src
      env:
        DOTNET_ROLL_FORWARD: LatestMajor
        DOTNET_ROLL_FORWARD_TO_PRERELEASE: 1

    - name: Run Build
      run: dotnet build -c Release
      env:
        BuildNet7: ${{ matrix.build_net7 }}
        BuildNet8: ${{ matrix.build_net8 }}

    - name: Run and report tests
      run: dotnet test -c Release -f ${{ matrix.test_tfm }} --no-restore --no-build --no-build --logger GitHubActions /p:AltCover=true /p:AltCoverAssemblyExcludeFilter="System.Reactive|FSharp.Compiler.Service|Ionide.ProjInfo|FSharp.Analyzers|Analyzer|Humanizer|FSharp.Core|FSharp.DependencyManager" -- Expecto.fail-on-focused-tests=true --blame-hang --blame-hang-timeout 1m
      working-directory: test/FsAutoComplete.Tests.Lsp
      env:
        BuildNet7: ${{ matrix.build_net7 }}
        BuildNet8: ${{ matrix.build_net8 }}

  analyze:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    - name: Restore tools
      run: dotnet tool restore

    - name: Run analyzers
      run: dotnet build -t:AnalyzeSolution -p:TargetFramework=net6.0

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: analysisreports
